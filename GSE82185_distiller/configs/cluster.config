
process {

    // default LSF node config
    executor='lsf'
    memory='8 GB'
    maxRetries = 2
    errorStrategy = 'retry'
    // the coolest feature of 'retry' that
    // one can dynamically adjust config for
    // processes - each one individually, or for all
    // using {task.attempt} as an index of attempt
    // queue='short'
    queue = { task.attempt<=1 ? 'short' : 'long' }
    // time='4h'
    time = { task.attempt<=1 ? '4h' : '12h' }

    // Set the location for temporary folders (mostly used in sorting).
    distillerTmpDir='./'
    // distillerTmpDir='/tmp'

    // use this scope of config
    // to specify LSF submission node
    // configuration. Use 'params'
    // to fine tune cpu requirements
    // for different scipts inside a process

    withName: download_sra{
        cpus = 2
        maxForks = 15
    }

    withName: download_truncate_chunk_fastqs {        
        maxForks = 10
        cpus = 4
        memory = '2 GB'
        queue = 'short'
        time = '2h'
    }

    withName: local_truncate_chunk_fastqs {        
        cpus = 4
        memory = '2 GB'
    }

    withName: fastqc {
        cpus = 4
        memory = '4 GB'
        queue = 'short'
        time = '2h'
    }


    withName: map_parse_sort_chunks {
        cpus = 8
        memory = '12 GB'
    }

    withName: merge_dedup_splitbam {
        cpus = 4
        memory = '16 GB'
        queue = 'long'
        time = '15h'
    }

    withName: bin_zoom_library_pairs {
        cpus = 8
        memory = '12 GB'
    }

    withName: merge_zoom_library_group_coolers {
        cpus = 8
        memory = '12 GB'
    }

    //
    // withName: merge_stats_libraries_into_groups
    // { use defaults }
    //


}

// singularity containers usage example
singularity {
    enabled = false
    // mount external "/nearline" to internal "/mnt"
    runOptions = "--bind /nearline:/mnt:rw"
    // enable automount when available
    autoMounts = false
}


// docker is rarely an option on
// big shared clusters.
docker {
    enabled = false
}
